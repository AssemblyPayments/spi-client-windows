using System;
using System.Linq;
using System.Numerics;
using SPIClient;
using Xunit; 

namespace Test
{
    public class DiffieHellmanTest
    {
        [Fact]
        public void Test_exchange()
        {
            var primeP = BigInteger.Parse(
                "32317006071311007300338913926423828248817941241140239112842009751400741706634354222619689417363569347117901737909704191754605873209195028853758986185622153212175412514901774520270235796078236248884246189477587641105928646099411723245426622522193230540919037680524235519125679715870117001058055877651038861847280257976054903569732561526167081339361799541336476559160368317896729073178384589680639671900977202194168647225871031411336429319536193471636533209717077448227988588565369208645296636077250268955505928362751121174096972998068410554359584866583291642136218231078990999448652468262416972035911852507045361090559");
            var primeG = 2;
            
            var privateKeyA = DiffieHellman.RandomPrivateKey(primeP);
            var privateKeyB = DiffieHellman.RandomPrivateKey(primeP);

            var publicKeyA = DiffieHellman.PublicKey(primeP, primeG, privateKeyA);
            var publicKeyB = DiffieHellman.PublicKey(primeP, primeG, privateKeyB);

            var secretA = DiffieHellman.Secret(primeP, publicKeyB, privateKeyA);
            var secretB = DiffieHellman.Secret(primeP, publicKeyA, privateKeyB);

            Assert.Equal(secretB, secretA);
        }

        [Fact]
        public void Test_against_well_known_results()
        {
            var primeP = BigInteger.Parse(

            var primeG = 2;

            // Well known inputs
            var publicKeyA = BigInteger.Parse(

            var privateKeyB = BigInteger.Parse(

            
            // Calculate Public Key
            var publicKeyB = DiffieHellman.PublicKey(primeP, primeG, privateKeyB);
            
            // Should result in the following well known number
            Assert.Equal(publicKeyB,
                BigInteger.Parse(
                    "13937492206031047726377677746757921023785865161711475317174852743458085972205230299198350504612922098487548140816754440307076166055257752333977500237623761651798309657163956423196446289209492990021148645911047877880418288215506315988031313308757685574136931332211416208698474521512055282419261914878127800815451795657625776361486208624055307330917667568520525506193865130553366132859605894136270581379193553757875072525875034653743007926569724507481311440697029586510437642238099656004667926545975053817946452156676950868454136633495486741131821585053777971482962860700849249057853674609970118970647438173499487768514"));

            // Calculate Secret 
            var secretB = DiffieHellman.Secret(primeP, publicKeyA, privateKeyB);
            // Should Result in the following well known secret.
            Assert.Equal(secretB,
                BigInteger.Parse(
                    "17574532284595554228770542578145458081719781058045063175688772743423924399411406200223997425795977226735712284391179978852253613346926080761628802664085045531796220784085311215093471160914442692274980632286568900367895454304533334450617380428362254473222831478193415222881689923861172428575632214297967550826460508634891791127942687630353829719246724903147169063379750256523005309264102997944008112551383251560153285483075803832550164760264165682355751637761390244202226339540318827287797180863284173748514677579269180126947721499144727772986832223499738071139796968492815538042908414723947769999062186130240163854083"));
        }

        [Fact]
        public void Test_Secret_against_another_well_known_results()
        {
            var primeP = BigInteger.Parse(
                "120227323036150778550155526710966921740030662694578947298423549235265759593711587341037426347114541533006628856300552706996143592240453345642869233562886752930249953227657883929905072620233073626594386072962776144691433658814261874113232461749035425712805067202910389407991986070558964461330091797026762932543");
            
            var publicKey = BigInteger.Parse(
                "75205441154357919442925546169208711235485855904969178206313309299205868312399046149367516336607966149689640419216591714331722664409474612463910928128055994157922930443733535659848264364106037925315974095321112757711756912144137705613776063541350548911512715512539186192176020596861210448363099541947258202188");
            var privateKey =
                BigInteger.Parse(
                    "2483479393625932939911081304356888505153797135447327501792696199190469015215177630758617902200417377685436170904594686456961202706692908603181062371925882");
            
            var expectedSecret = BigInteger.Parse(
                "70900735223964890815905879227737819348808518698920446491346508980461201746567735331455825644429877946556431095820785835497384849778344216981228226252639932672153547963980483673419756271345828771971984887453014488572245819864454136618980914729839523581263886740821363010486083940557620831348661126601106717071");
            var calculatedSecret = DiffieHellman.Secret(primeP, publicKey, privateKey);
            
            Assert.Equal(expectedSecret, calculatedSecret);
        }
        
        [Fact]
        public void Private_key_in_range()
        {
            var primeP = new BigInteger(23);
            var privateKeys = Enumerable.Range(0, 100).Select(_ => DiffieHellman.RandomPrivateKey(primeP)).ToList();
            Assert.All(privateKeys,
                privateKey => { Assert.InRange(privateKey, new BigInteger(2), primeP - new BigInteger(1)); });
        }

        [Fact]
        public void Private_key_randomly_generated()
        {
            var primeP = new BigInteger(7919);
            var count = 100;
            var privateKeys = Enumerable.Range(0, count).Select(_ => DiffieHellman.RandomPrivateKey(primeP)).ToList();

            // be a little lenient because out of 100, we are bound to get duplicates when range is just 7919
            var leniency = 5;
            Assert.True(count - privateKeys.Distinct().Count() < 5);
        }

        [Fact]
        public void Public_key_correctly_calculated()
        {
            var primeP = new BigInteger(23);
            var primeG = new BigInteger(5);
            var privateKey = new BigInteger(6);

            var actual = DiffieHellman.PublicKey(primeP, primeG, privateKey);
            Assert.Equal(new BigInteger(8), actual);
        }

        [Fact]
        public void Secret_key_correctly_calculated()
        {
            var primeP = new BigInteger(23);
            var publicKey = new BigInteger(19);
            var privateKey = new BigInteger(6);

            var actual = DiffieHellman.Secret(primeP, publicKey, privateKey);
            Assert.Equal(new BigInteger(2), actual);
        }

        [Fact]
        public void Random_Techniques_Test()
        {
            var maxInt = BigInteger.Parse("32317006071311007300338913926423828248817941241140239112842009751400741706634354222619689417363569347117901737909704191754605873209195028853758986185622153212175412514901774520270235796078236248884246189477587641105928646099411723245426622522193230540919037680524235519125679715870117001058055877651038861847280257976054903569732561526167081339361799541336476559160368317896729073178384589680639671900977202194168647225871031411336429319536193471636533209717077448227988588565369208645296636077250268955505928362751121174096972998068410554359584866583291642136218231078990999448652468262416972035911852507045361090559");
            
            var time = DateTime.Now;
            for (var i = 0; i < 1000; i++)
            {

                var ri = RandomHelper.RandomBigIntMethod1(maxInt);
//                Console.WriteLine(ri.ToString());
            }
            Console.WriteLine("1000 randoms using method 1: {0}", DateTime.Now.Subtract(time));

            
            time = DateTime.Now;
            for (var i = 0; i < 1000; i++)
            {
                var ri = RandomHelper.RandomBigIntMethod2(maxInt);
//                Console.WriteLine(ri.ToString());
            }
            Console.WriteLine("1000 randoms using method 2: {0}", DateTime.Now.Subtract(time));
        }

    }
}